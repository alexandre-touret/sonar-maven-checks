diff --cc pom.xml
index 90d334a,87f997f..0000000
--- a/pom.xml
+++ b/pom.xml
@@@ -86,12 -81,6 +86,15 @@@
        <version>0.2</version>
      </dependency>
      <dependency>
++<<<<<<< HEAD
 +      <groupId>org.easytesting</groupId>
 +      <artifactId>fest-assert-core</artifactId>
 +      <version>2.0M7</version>
 +      <scope>test</scope>
 +    </dependency>
 +    <dependency>
++=======
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>1.3.1</version>
diff --cc src/main/java/de/lgohlke/sonar/maven/Maven3SonarEmbedder.java
index d53d3ee,e6f51b7..0000000
--- a/src/main/java/de/lgohlke/sonar/maven/Maven3SonarEmbedder.java
+++ b/src/main/java/de/lgohlke/sonar/maven/Maven3SonarEmbedder.java
@@@ -1,176 -1,175 +1,354 @@@
++<<<<<<< HEAD
 +/*
 + * Sonar maven checks plugin
 + * Copyright (C) 2012 Lars Gohlke
 + * dev@sonar.codehaus.org
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of the GNU Lesser General Public
 + * License as published by the Free Software Foundation; either
 + * version 3 of the License, or (at your option) any later version.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 + * Lesser General Public License for more details.
 + *
 + * You should have received a copy of the GNU Lesser General Public
 + * License along with this program; if not, write to the Free Software
 + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 + */
 +package de.lgohlke.sonar.maven;
 +
 +import com.google.common.base.Preconditions;
 +import de.lgohlke.sonar.maven.extension.ExecutionListenerImpl;
 +import de.lgohlke.sonar.maven.extension.MyPlexusLogger;
 +import de.lgohlke.sonar.maven.extension.StopMavenExectionException;
 +import hudson.maven.MavenEmbedder;
 +import hudson.maven.MavenEmbedderException;
 +import hudson.maven.MavenRequest;
 +import lombok.RequiredArgsConstructor;
 +import lombok.extern.slf4j.Slf4j;
 +import org.apache.maven.InternalErrorException;
 +import org.apache.maven.cli.MavenLoggerManager;
 +import org.apache.maven.execution.MavenExecutionResult;
 +import org.apache.maven.plugin.Mojo;
 +import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 +import java.io.File;
 +import java.io.IOException;
 +import java.util.Arrays;
 +import java.util.HashMap;
 +import java.util.Map;
 +
 +
 +@RequiredArgsConstructor
 +@Slf4j
 +public class MavenSonarEmbedder {
 +  private final MavenEmbedder embedder;
 +  private final MavenRequest mavenRequest;
 +
 +  public void run() throws MavenEmbedderException {
 +    try {
 +      MavenExecutionResult result = embedder.execute(mavenRequest);
 +      if (result.hasExceptions()) {
 +        final Throwable firstException = result.getExceptions().get(0);
 +        if ((firstException instanceof InternalErrorException) && (firstException.getCause() != null) &&
 +            (firstException.getCause() instanceof StopMavenExectionException)) {
 +          // everything ok, this is the workaround
 +        } else {
 +          throw new MavenEmbedderException(firstException);
 +        }
 +      }
 +    } catch (ComponentLookupException e) {
 +      throw new MavenEmbedderException(e);
 +    }
 +  }
 +
 +  public static MavenSonarEmbedderBuilder configure() {
 +    return new MavenSonarEmbedderBuilder();
 +  }
 +
 +  public static class MavenSonarEmbedderBuilder {
 +    private String pom;
 +    private String goal;
 +    private File mavenHome;
 +    private MojoExecutionHandler<?, ?> mojoExectionHandler;
 +
 +    public MavenSonarEmbedderBuilder usePomFile(final String pomFile) {
 +      Preconditions.checkNotNull(pomFile);
 +      this.pom = pomFile;
 +      return this;
 +    }
 +
 +    public MavenSonarEmbedderBuilder goal(final String goal) {
 +      Preconditions.checkNotNull(goal);
 +      this.goal = goal;
 +      return this;
 +    }
 +
 +    /**
 +     * could be called multiple times
 +     * @param mavenHome
 +     * @return
 +     */
 +    public MavenSonarEmbedderBuilder setAlternativeMavenHome(final File mavenHome) {
 +      Preconditions.checkNotNull(mavenHome);
 +      if ((this.mavenHome == null) && mavenHome.isDirectory()) {
 +        this.mavenHome = mavenHome;
 +      }
 +      return this;
 +    }
 +
 +    public MavenSonarEmbedderBuilder setMojoExecutionHandler(final MojoExecutionHandler<?, ?> mojoExectionHandler) {
 +      Preconditions.checkNotNull(mojoExectionHandler);
 +      this.mojoExectionHandler = mojoExectionHandler;
 +      return this;
 +    }
 +
 +    @SuppressWarnings({ "unchecked", "rawtypes" })
 +    private void detectMavenHomeIfNull() {
 +      if (mavenHome == null) {
 +        Map<String, String> envMap = new HashMap<String, String>(System.getenv());
 +        envMap.putAll((Map) System.getProperties());
 +        if (envMap.containsKey("maven.home")) {
 +          mavenHome = new File(envMap.get("maven.home"));
 +        } else if (envMap.containsKey("M2_HOME")) {
 +          mavenHome = new File(envMap.get("M2_HOME"));
 +        } else {
 +          final String currentProgramm = System.getenv("_");
 +          if (currentProgramm != null) {
 +            File mvnBinary = new File(currentProgramm);
 +            if ((mvnBinary != null) && mvnBinary.exists()) {
 +              mavenHome = mvnBinary.getParentFile().getParentFile();
 +            }
 +          }
 +        }
 +
 +        Preconditions.checkNotNull(mavenHome, "we did not find the maven directory");
 +        Preconditions.checkArgument(mavenHome.isDirectory(),
 +          "maveHome is " + mavenHome + ", but a directory is needed");
 +      }
 +    }
 +
 +    public MavenSonarEmbedder build() throws MavenEmbedderException {
 +      Preconditions.checkNotNull(pom, "missing pom");
 +      Preconditions.checkNotNull(mojoExectionHandler, "missing mojoExectionHandler");
 +      if (goal == null) {
 +        useBridgeMojo(mojoExectionHandler.getReplacingMojo());
 +      }
 +
 +      Preconditions.checkNotNull(goal, "missing goal");
 +      Preconditions.checkState(goal.length() > 0, "goal is empty");
 +
 +      MavenRequest mavenRequest = new MavenRequest();
 +      mavenRequest.setPom(pom);
 +      mavenRequest.setShowErrors(true);
 +      mavenRequest.setGoals(Arrays.asList(goal));
 +      mavenRequest.setLoggingLevel(1);
 +      mavenRequest.setMavenLoggerManager(new MavenLoggerManager(new MyPlexusLogger(log)));
 +      detectMavenHomeIfNull();
 +
 +      try {
 +        final File m2File = new File(mavenHome.getCanonicalPath() + "/bin/m2.conf");
 +        Preconditions.checkArgument(m2File.exists(), "not found bin/m2.conf in " + mavenHome);
 +      } catch (IOException e1) {
 +        throw new MavenEmbedderException(e1);
 +      }
 +
 +      final ExecutionListenerImpl executionListener = new ExecutionListenerImpl(mojoExectionHandler);
 +      mavenRequest.setExecutionListener(executionListener);
 +
 +      final MavenEmbedder embedder = new MavenEmbedder(mavenHome, mavenRequest);
 +
 +      executionListener.setLookuper(new SonarMavenEmbeddedLookupStrategy(embedder));
 +      return new MavenSonarEmbedder(embedder, mavenRequest);
 +    }
 +
 +    public MavenSonarEmbedderBuilder useBridgeMojo(final Class<? extends Mojo> clazz) throws MavenEmbedderException {
 +      Goal goalAnnotation = clazz.getAnnotation(Goal.class);
 +      if (goalAnnotation == null) {
 +        throw new MavenEmbedderException("mojos need " + Goal.class +
 +          " annotation to identify the goal, this is missing in " + clazz);
 +      }
 +
 +      return goal(goalAnnotation.value());
 +    }
 +  }
 +}
++=======
+ /*
+  * Sonar maven checks plugin
+  * Copyright (C) 2012 Lars Gohlke
+  * dev@sonar.codehaus.org
+  *
+  * This program is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+  * version 3 of the License, or (at your option) any later version.
+  *
+  * This program is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public
+  * License along with this program; if not, write to the Free Software
+  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+  */
+ package de.lgohlke.sonar.maven;
+ 
+ import com.google.common.base.Preconditions;
+ import de.lgohlke.sonar.maven.extension.MyPlexusLogger;
+ import hudson.maven.MavenEmbedder;
+ import hudson.maven.MavenEmbedderException;
+ import hudson.maven.MavenRequest;
+ import org.apache.maven.cli.MavenLoggerManager;
+ import org.apache.maven.execution.MavenExecutionResult;
+ import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
+ import org.slf4j.Logger;
+ import org.slf4j.LoggerFactory;
+ 
+ import java.io.File;
+ import java.io.IOException;
+ import java.util.Arrays;
+ import java.util.HashMap;
+ import java.util.Map;
+ 
+ public class Maven3SonarEmbedder {
+   private final static Logger logger = LoggerFactory.getLogger(Maven3SonarEmbedder.class);
+   private final MavenRequest mavenRequest;
+   private final MavenEmbedder embedder;
+ 
+   private Maven3SonarEmbedder(final MavenEmbedder embedder, final MavenRequest mavenRequest) {
+     this.embedder = embedder;
+     this.mavenRequest = mavenRequest;
+   }
+ 
+   public void run() throws MavenEmbedderException {
+     try {
+       MavenExecutionResult result = embedder.execute(mavenRequest);
+       if (result.hasExceptions()) {
+         final Throwable firstException = result.getExceptions().get(0);
+         throw new MavenEmbedderException(firstException);
+       }
+     } catch (ComponentLookupException e) {
+       throw new MavenEmbedderException(e);
+     }
+   }
+ 
+   public static MavenSonarEmbedderBuilder configure() {
+     return new MavenSonarEmbedderBuilder();
+   }
+ 
+   public static class MavenSonarEmbedderBuilder {
+     private String pom;
+     private String goal;
+     private File mavenHome;
+     private int logLevel = org.codehaus.plexus.logging.Logger.LEVEL_ERROR;
+ 
+     public MavenSonarEmbedderBuilder usePomFile(final String pomFile) {
+       Preconditions.checkNotNull(pomFile);
+       this.pom = pomFile;
+       return this;
+     }
+ 
+     public MavenSonarEmbedderBuilder goal(final String goal) {
+       Preconditions.checkNotNull(goal);
+       this.goal = goal;
+       return this;
+     }
+ 
+     /**
+      * <pre>
+      * int LEVEL_DEBUG = 0;
+      * 
+      * int LEVEL_INFO = 1;
+      * 
+      * int LEVEL_WARN = 2;
+      * 
+      * int LEVEL_ERROR = 3;
+      * 
+      * int LEVEL_FATAL = 4;
+      * 
+      * int LEVEL_DISABLED = 5;
+      * </pre>
+      * 
+      * @param level
+      * @return
+      */
+     public MavenSonarEmbedderBuilder logLevel(final int level) {
+       Preconditions.checkArgument(level > -1 && level < 6);
+       this.logLevel = level;
+       return this;
+     }
+ 
+     /**
+      * could be called multiple times
+      * 
+      * @param mavenHome
+      * @return
+      */
+     public MavenSonarEmbedderBuilder setAlternativeMavenHome(final File mavenHome) {
+       Preconditions.checkNotNull(mavenHome);
+       if (this.mavenHome == null && mavenHome.isDirectory()) {
+         this.mavenHome = mavenHome;
+       }
+       return this;
+     }
+ 
+     @SuppressWarnings({"unchecked", "rawtypes"})
+     private void detectMavenHomeIfNull() {
+       if (mavenHome == null) {
+         Map<String, String> envMap = new HashMap<String, String>(System.getenv());
+         envMap.putAll((Map) System.getProperties());
+         if (envMap.containsKey("maven.home")) {
+           mavenHome = new File(envMap.get("maven.home"));
+         }
+         else if (envMap.containsKey("M2_HOME")) {
+           mavenHome = new File(envMap.get("M2_HOME"));
+         } else {
+           final String currentProgramm = System.getenv("_");
+           if (currentProgramm != null) {
+             File mvnBinary = new File(currentProgramm);
+             if (mvnBinary != null) {
+               if (mvnBinary.exists())
+               {
+                 mavenHome = mvnBinary.getParentFile().getParentFile();
+               }
+             }
+           }
+         }
+ 
+         Preconditions.checkNotNull(mavenHome, "we did not find the maven directory");
+         Preconditions.checkArgument(mavenHome.isDirectory(), "maveHome is " + mavenHome + ", but a directory is needed");
+       }
+     }
+ 
+     public Maven3SonarEmbedder build() throws MavenEmbedderException {
+ 
+       Preconditions.checkNotNull(pom, "missing pom");
+ 
+       Preconditions.checkNotNull(goal, "missing goal");
+       Preconditions.checkState(goal.length() > 0, "goal is empty");
+ 
+       MavenRequest mavenRequest = new MavenRequest();
+       mavenRequest.setPom(pom);
+       mavenRequest.setShowErrors(true);
+       mavenRequest.setGoals(Arrays.asList(goal));
+       mavenRequest.setLoggingLevel(logLevel);
+       mavenRequest.setMavenLoggerManager(new MavenLoggerManager(new MyPlexusLogger(logger)));
+       detectMavenHomeIfNull();
+ 
+       try {
+         final File m2File = new File(mavenHome.getCanonicalPath() + "/bin/m2.conf");
+         Preconditions.checkArgument(m2File.exists(), "not found bin/m2.conf in " + mavenHome);
+       } catch (IOException e1) {
+         throw new MavenEmbedderException(e1);
+       }
+ 
+       final MavenEmbedder embedder = new MavenEmbedder(mavenHome, mavenRequest);
+       return new Maven3SonarEmbedder(embedder, mavenRequest);
+     }
+   }
+ }
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
diff --cc src/main/java/de/lgohlke/sonar/maven/extension/MyPlexusLogger.java
index 1bfdf84,d1991e1..0000000
--- a/src/main/java/de/lgohlke/sonar/maven/extension/MyPlexusLogger.java
+++ b/src/main/java/de/lgohlke/sonar/maven/extension/MyPlexusLogger.java
@@@ -1,134 -1,139 +1,276 @@@
++<<<<<<< HEAD
 +/*
 + * Sonar maven checks plugin
 + * Copyright (C) 2012 Lars Gohlke
 + * dev@sonar.codehaus.org
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of the GNU Lesser General Public
 + * License as published by the Free Software Foundation; either
 + * version 3 of the License, or (at your option) any later version.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 + * Lesser General Public License for more details.
 + *
 + * You should have received a copy of the GNU Lesser General Public
 + * License along with this program; if not, write to the Free Software
 + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 + */
 +package de.lgohlke.sonar.maven.extension;
 +
 +import org.codehaus.plexus.logging.Logger;
 +
 +
 +public class MyPlexusLogger implements Logger {
 +  private final org.slf4j.Logger log;
 +
 +  public MyPlexusLogger(final org.slf4j.Logger logger) {
 +    this.log = logger;
 +  }
 +
 +  @Override
 +  public void debug(final String message) {
 +    log.debug(message);
 +  }
 +
 +  @Override
 +  public void debug(final String message, final Throwable throwable) {
 +    log.debug(message, throwable);
 +  }
 +
 +  @Override
 +  public boolean isDebugEnabled() {
 +    return log.isDebugEnabled();
 +  }
 +
 +  @Override
 +  public void info(final String message) {
 +    log.info(message);
 +  }
 +
 +  @Override
 +  public void info(final String message, final Throwable throwable) {
 +    log.info(message, throwable);
 +  }
 +
 +  @Override
 +  public boolean isInfoEnabled() {
 +    return log.isInfoEnabled();
 +  }
 +
 +  @Override
 +  public void warn(final String message) {
 +    log.warn(message);
 +  }
 +
 +  @Override
 +  public void warn(final String message, final Throwable throwable) {
 +    log.warn(message, throwable);
 +  }
 +
 +  @Override
 +  public boolean isWarnEnabled() {
 +    return log.isWarnEnabled();
 +  }
 +
 +  @Override
 +  public void error(final String message) {
 +    log.error(message);
 +  }
 +
 +  @Override
 +  public void error(final String message, final Throwable throwable) {
 +    log.error(message, throwable);
 +  }
 +
 +  @Override
 +  public boolean isErrorEnabled() {
 +    return log.isErrorEnabled();
 +  }
 +
 +  @Override
 +  public void fatalError(final String message) {
 +    log.error("FATAL: " + message);
 +  }
 +
 +  @Override
 +  public void fatalError(final String message, final Throwable throwable) {
 +    log.error("FATAL: " + message, throwable);
 +  }
 +
 +  @Override
 +  public boolean isFatalErrorEnabled() {
 +    return log.isErrorEnabled();
 +  }
 +
 +  @Override
 +  public int getThreshold() {
 +    if (log.isDebugEnabled() || log.isTraceEnabled()) {
 +      return Logger.LEVEL_DEBUG;
 +    } else if (log.isErrorEnabled()) {
 +      return Logger.LEVEL_ERROR;
 +    } else if (log.isWarnEnabled()) {
 +      return Logger.LEVEL_WARN;
 +    } else {
 +      return Logger.LEVEL_DISABLED;
 +    }
 +  }
 +
 +  @Override
 +  public void setThreshold(final int threshold) {
 +    // ok
 +  }
 +
 +  @Override
 +  public Logger getChildLogger(final String name) {
 +    return this;
 +  }
 +
 +  @Override
 +  public String getName() {
 +    return this.getClass().getName();
 +  }
 +}
++=======
+ /*
+  * Sonar maven checks plugin
+  * Copyright (C) 2012 Lars Gohlke
+  * dev@sonar.codehaus.org
+  *
+  * This program is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+  * version 3 of the License, or (at your option) any later version.
+  *
+  * This program is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public
+  * License along with this program; if not, write to the Free Software
+  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+  */
+ package de.lgohlke.sonar.maven.extension;
+ 
+ import org.codehaus.plexus.logging.Logger;
+ 
+ /**
+  * need for setting log level of maven-subsystem
+  * 
+  * @author Lars Gohlke *
+  */
+ public class MyPlexusLogger implements Logger {
+ 
+   private final org.slf4j.Logger log;
+ 
+   public MyPlexusLogger(final org.slf4j.Logger logger) {
+     this.log = logger;
+   }
+ 
+   @Override
+   public void debug(final String message) {
+     log.debug(message);
+   }
+ 
+   @Override
+   public void debug(final String message, final Throwable throwable) {
+     log.debug(message, throwable);
+   }
+ 
+   @Override
+   public boolean isDebugEnabled() {
+     return log.isDebugEnabled();
+   }
+ 
+   @Override
+   public void info(final String message) {
+     log.info(message);
+   }
+ 
+   @Override
+   public void info(final String message, final Throwable throwable) {
+     log.info(message, throwable);
+   }
+ 
+   @Override
+   public boolean isInfoEnabled() {
+     return log.isInfoEnabled();
+   }
+ 
+   @Override
+   public void warn(final String message) {
+     log.warn(message);
+   }
+ 
+   @Override
+   public void warn(final String message, final Throwable throwable) {
+     log.warn(message, throwable);
+   }
+ 
+   @Override
+   public boolean isWarnEnabled() {
+     return log.isWarnEnabled();
+   }
+ 
+   @Override
+   public void error(final String message) {
+     log.error(message);
+   }
+ 
+   @Override
+   public void error(final String message, final Throwable throwable) {
+     log.error(message, throwable);
+   }
+ 
+   @Override
+   public boolean isErrorEnabled() {
+     return log.isErrorEnabled();
+   }
+ 
+   @Override
+   public void fatalError(final String message) {
+     log.error("FATAL: " + message);
+   }
+ 
+   @Override
+   public void fatalError(final String message, final Throwable throwable) {
+     log.error("FATAL: " + message, throwable);
+   }
+ 
+   @Override
+   public boolean isFatalErrorEnabled() {
+     return log.isErrorEnabled();
+   }
+ 
+   @Override
+   public int getThreshold() {
+     if (log.isDebugEnabled() || log.isTraceEnabled()) {
+       return Logger.LEVEL_DEBUG;
+     } else if (log.isErrorEnabled()) {
+       return Logger.LEVEL_ERROR;
+     } else if (log.isWarnEnabled()) {
+       return Logger.LEVEL_WARN;
+     } else {
+       return Logger.LEVEL_DISABLED;
+     }
+   }
+ 
+   @Override
+   public void setThreshold(final int threshold) {
+     // ok
+   }
+ 
+   @Override
+   public Logger getChildLogger(final String name) {
+     return this;
+   }
+ 
+   @Override
+   public String getName() {
+     return this.getName();
+   }
+ }
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
diff --cc src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/sonar/MavenVersionSensor.java
index e316b95,efb44c2..0000000
--- a/src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/sonar/MavenVersionSensor.java
+++ b/src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/sonar/MavenVersionSensor.java
@@@ -1,127 -1,77 +1,207 @@@
++<<<<<<< HEAD
 +/*
 + * Sonar maven checks plugin
 + * Copyright (C) 2012 Lars Gohlke
 + * dev@sonar.codehaus.org
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of the GNU Lesser General Public
 + * License as published by the Free Software Foundation; either
 + * version 3 of the License, or (at your option) any later version.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 + * Lesser General Public License for more details.
 + *
 + * You should have received a copy of the GNU Lesser General Public
 + * License along with this program; if not, write to the Free Software
 + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 + */
 +package de.lgohlke.sonar.maven.plugin.org.codehaus.mojo.versions.sonar;
 +
 +import de.lgohlke.sonar.maven.SonarMavenMojoLookupStratey;
 +
 +import de.lgohlke.sonar.maven.MavenPluginExecutorFactory;
 +import de.lgohlke.sonar.maven.MavenPluginExecutorWithExecutionListener;
 +import de.lgohlke.sonar.maven.MojoExecutionHandler;
 +import de.lgohlke.sonar.maven.extension.ExecutionListenerImpl;
 +import de.lgohlke.sonar.maven.plugin.versions.MavenVersionsGoal;
 +import de.lgohlke.sonar.maven.plugin.versions.MavenVersionsPluginHandlerFactory;
 +import de.lgohlke.sonar.plugin.MavenPlugin;
 +import org.apache.maven.project.MavenProject;
 +import org.slf4j.Logger;
 +import org.slf4j.LoggerFactory;
 +import org.sonar.api.batch.Phase;
 +import org.sonar.api.batch.Sensor;
 +import org.sonar.api.batch.SensorContext;
 +import org.sonar.api.batch.bootstrap.ProjectDefinition;
 +import org.sonar.api.batch.maven.DependsUponMavenPlugin;
 +import org.sonar.api.batch.maven.MavenPluginHandler;
 +import org.sonar.api.profiles.RulesProfile;
 +import org.sonar.api.resources.Project;
 +import org.sonar.batch.MavenPluginExecutor;
 +
 +@Phase(name = Phase.Name.PRE)
 +public class MavenVersionSensor implements Sensor, DependsUponMavenPlugin {
 +  private final Logger logger = LoggerFactory.getLogger(getClass());
 +
 +  private final MavenProject mavenProject;
 +  private final RulesProfile rulesProfile;
 +
 +  private final MavenPluginExecutorWithExecutionListener mavenPluginExecutor;
 +
 +  private final ProjectDefinition projectDefinition;
 +
 +  private final Project project;
 +
 +  public MavenVersionSensor(final MavenProject mavenProject, final RulesProfile profile, final MavenPluginExecutor mavenPluginExecutor, final Project project,
 +      final ProjectDefinition projectDefinition) {
 +    this.mavenProject = mavenProject;
 +    this.rulesProfile = profile;
 +    this.project = project;
 +    this.projectDefinition = projectDefinition;
 +    this.mavenPluginExecutor = MavenPluginExecutorFactory.createInstance(mavenProject, mavenPluginExecutor);
 +  }
 +
 +  public MavenVersionSensor() {
 +    this(null, null, null, null, null);
 +  }
 +
 +  @Override
 +  public String toString() {
 +    return getClass().getSimpleName();
 +  }
 +
 +  @Override
 +  public boolean shouldExecuteOnProject(final Project project) {
 +    String prop = (String) project.getProperty(MavenPlugin.ANALYSIS_ENABLED);
 +    if (prop == null) {
 +      prop = MavenPlugin.DEFAULT;
 +    }
 +
 +    final boolean propActive = Boolean.parseBoolean(prop);
 +    return propActive && (mavenProject != null);
 +  }
 +
 +  @Override
 +  public void analyse(final Project project, final SensorContext context) {
 +    final MavenPluginHandler handler = getMavenPluginHandler(project);
 +
 +    // final MojoExecutionHandler<?, ?> mojoExectionHandler = new DependencyVersionExecutor().getMojoExectionHandler();
 +    final MojoExecutionHandler<?, ?> mojoExectionHandler = new VersionHelpExecutor().getMojoExectionHandler();
 +    ExecutionListenerImpl executionListener = new ExecutionListenerImpl(mojoExectionHandler);
 +    executionListener.setLookuper(new SonarMavenMojoLookupStratey(mavenPluginExecutor));
 +    mavenPluginExecutor.setExecutionListener(executionListener);
 +    mavenPluginExecutor.execute(project, projectDefinition, handler);
 +  }
 +
 +  @Override
 +  public MavenPluginHandler getMavenPluginHandler(final Project project) {
 +    // return MavenVersionsPluginHandlerFactory.DisplayDependencyUpdates.pluginHandler();
 +    return MavenVersionsPluginHandlerFactory.create(MavenVersionsGoal.Help);
 +  }
 +
 +  // private void executeGoalForRule(final SensorContext context, final GOAL goal) {
 +  //
 +  // try {
 +  // UpdateHandler handler = goal.handler().newInstance();
 +  // Log.info("testing for " + goal.goal());
 +  // new MavenInvoker(mavenProject.getFile(), handler).run(goal);
 +  //
 +  // Rule rule = Rule.create(MavenPlugin.REPOSITORY_KEY, goal.rule().getKey());
 +  // final File file = new File("", mavenProject.getFile().getName());
 +  // file.setLanguage(Xml.INSTANCE);
 +  // for (ArtifactUpdate update : handler.getUpdates()) {
 +  // Violation violation = Violation.create(rule, file);
 +  // violation.setMessage(goal.rule().formatMessage(update));
 +  // context.saveViolation(violation);
 +  // }
 +  // } catch (InstantiationException e) {
 +  // logger.error(e.getMessage(), e);
 +  // } catch (IllegalAccessException e) {
 +  // logger.error(e.getMessage(), e);
 +  // } catch (MavenInvocationException e) {
 +  // logger.error(e.getMessage(), e);
 +  // }
 +  // }
 +}
++=======
+ /*
+  * Sonar maven checks plugin
+  * Copyright (C) 2012 Lars Gohlke
+  * dev@sonar.codehaus.org
+  *
+  * This program is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+  * version 3 of the License, or (at your option) any later version.
+  *
+  * This program is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public
+  * License along with this program; if not, write to the Free Software
+  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+  */
+ package de.lgohlke.sonar.maven.plugin.versions;
+ 
+ import de.lgohlke.sonar.maven.MavenPluginExecutorProxyInjection;
+ import de.lgohlke.sonar.maven.plugin.versions.bridgeMojos.DisplayDependencyUpdatesBridgeMojoResultHandler;
+ import de.lgohlke.sonar.plugin.MavenPlugin;
+ import org.apache.maven.project.MavenProject;
+ import org.sonar.api.batch.Phase;
+ import org.sonar.api.batch.Sensor;
+ import org.sonar.api.batch.SensorContext;
+ import org.sonar.api.batch.maven.DependsUponMavenPlugin;
+ import org.sonar.api.batch.maven.MavenPluginHandler;
+ import org.sonar.api.profiles.RulesProfile;
+ import org.sonar.api.resources.Project;
+ import org.sonar.batch.MavenPluginExecutor;
+ 
+ @Phase(name = Phase.Name.PRE)
+ public class MavenVersionSensor implements Sensor, DependsUponMavenPlugin {
+ 
+   private final RulesProfile rulesProfile;
+   private final MavenVersionsBridgeMojoMapper bridgeMojoMapper = new MavenVersionsBridgeMojoMapper();
+   private final MavenProject mavenProject;
+ 
+   public MavenVersionSensor(final RulesProfile profile, final MavenPluginExecutor mavenPluginExecutor, final MavenProject mavenProject) {
+     this.rulesProfile = profile;
+     MavenPluginExecutorProxyInjection.inject(mavenPluginExecutor, getClass().getClassLoader(), bridgeMojoMapper);
+     this.mavenProject = mavenProject;
+   }
+ 
+   @Override
+   public String toString() {
+     return getClass().getSimpleName();
+   }
+ 
+   @Override
+   public boolean shouldExecuteOnProject(final Project project) {
+     String prop = (String) project.getProperty(MavenPlugin.ANALYSIS_ENABLED);
+     if (prop == null) {
+       prop = MavenPlugin.DEFAULT;
+     }
+ 
+     return Boolean.parseBoolean(prop);
+   }
+ 
+   @Override
+   public void analyse(final Project project, final SensorContext context) {
+ 
+     DisplayDependencyUpdatesBridgeMojoResultHandler handler = (DisplayDependencyUpdatesBridgeMojoResultHandler) bridgeMojoMapper.getGoalToTransferHandlerMap().get(
+         Goals.DISPLAY_DEPENDENCY_UPDATES);
+ 
+     handler.setMavenProject(mavenProject);
+     handler.analyse(project, context);
+   }
+ 
+   @Override
+   public MavenPluginHandler getMavenPluginHandler(final Project project) {
+     return MavenVersionsPluginHandlerFactory.create(MavenVersionsGoal.DisplayDependencyUpdates);
+   }
+ }
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
diff --cc src/main/java/de/lgohlke/sonar/plugin/RulesRepository.java
index 5abd44d,a89f706..0000000
--- a/src/main/java/de/lgohlke/sonar/plugin/RulesRepository.java
+++ b/src/main/java/de/lgohlke/sonar/plugin/RulesRepository.java
@@@ -19,9 -19,9 +19,15 @@@
   */
  package de.lgohlke.sonar.plugin;
  
++<<<<<<< HEAD
 +import de.lgohlke.sonar.maven.plugin.org.codehaus.mojo.versions.sonar.rules.DependencyVersionMavenRule;
 +import de.lgohlke.sonar.maven.plugin.org.codehaus.mojo.versions.sonar.rules.PluginVersionMavenRule;
 +
++=======
+ import de.lgohlke.sonar.maven.plugin.versions.rules.PluginVersionMavenRule;
+ 
+ import de.lgohlke.sonar.maven.plugin.versions.rules.DependencyVersionMavenRule;
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
  
  
  import org.sonar.api.rules.AnnotationRuleParser;
diff --cc src/test/java/de/lgohlke/sonar/maven/Maven3SonarEmbedderTest.java
index 34abbe0,50357c1..0000000
--- a/src/test/java/de/lgohlke/sonar/maven/Maven3SonarEmbedderTest.java
+++ b/src/test/java/de/lgohlke/sonar/maven/Maven3SonarEmbedderTest.java
@@@ -1,171 -1,135 +1,309 @@@
++<<<<<<< HEAD
 +/*
 + * Sonar maven checks plugin
 + * Copyright (C) 2012 Lars Gohlke
 + * dev@sonar.codehaus.org
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of the GNU Lesser General Public
 + * License as published by the Free Software Foundation; either
 + * version 3 of the License, or (at your option) any later version.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 + * Lesser General Public License for more details.
 + *
 + * You should have received a copy of the GNU Lesser General Public
 + * License along with this program; if not, write to the Free Software
 + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 + */
 +package de.lgohlke.MavenVersion;
 +
 +import com.google.common.collect.Lists;
 +import de.lgohlke.sonar.maven.MavenSonarEmbedder;
 +import de.lgohlke.sonar.maven.MojoExecutionHandler;
 +import hudson.maven.MavenEmbedderException;
 +import org.apache.maven.lifecycle.LifecyclePhaseNotFoundException;
 +import org.apache.maven.plugin.MojoNotFoundException;
 +import org.codehaus.mojo.versions.HelpMojo;
 +import org.fest.assertions.api.Assertions;
 +import org.mockito.Mockito;
 +import org.testng.annotations.BeforeMethod;
 +import org.testng.annotations.BeforeTest;
 +import org.testng.annotations.Test;
 +import java.io.File;
 +import java.util.List;
 +import static org.fest.assertions.api.Assertions.assertThat;
 +
 +
 +public class MavenEmbedderTest {
 +  private static final String MAVEN_HOME_KEY = "maven.home";
 +  private static final String M2_HOME_KEY = "M2_HOME";
 +  public static final File MAVEN_HOME = new File("/data/home/lgohlke/development/tools/apache-maven-3.0.4");
 +
 +  // public static final File MAVEN_HOME = new File("/home/lars/development/tools/apache-maven-3.0.4");
 +
 +  public static class MyHelpMojo extends HelpMojo {
 +  }
 +
 +  @BeforeMethod(alwaysRun = true)
 +  @BeforeTest(alwaysRun = true)
 +  public void setUp() {
 +    System.getProperties().remove(M2_HOME_KEY);
 +    System.getProperties().remove(MAVEN_HOME_KEY);
 +  }
 +
 +  @Test
 +  public void testSimpleRunWithExecutionListener() throws Exception {
 +    final List<String> statePassed = Lists.newArrayList();
 +
 +    final MojoExecutionHandler<HelpMojo, MyHelpMojo> mojoExectionHandler =
 +      new MojoExecutionHandler<HelpMojo, MyHelpMojo>(HelpMojo.class, MyHelpMojo.class) {
 +        @Override
 +        protected void beforeExecution2(final MyHelpMojo mojo) {
 +          assertThat(mojo).isNotNull();
 +          statePassed.add("before");
 +        }
 +
 +        @Override
 +        protected void afterExecution2(final MyHelpMojo mojo) {
 +          assertThat(mojo).isNotNull();
 +          statePassed.add("after");
 +        }
 +      };
 +
 +    MavenSonarEmbedder.configure()
 +    .usePomFile("pom.xml")
 +    .goal("versions:help")
 +    .setAlternativeMavenHome(MAVEN_HOME)
 +    .setMojoExecutionHandler(mojoExectionHandler)
 +    .build()
 +    .run();
 +
 +    assertThat(statePassed).containsExactly("before", "after");
 +  }
 +
 +  final String goal = "versions:display-dependency-updates";
 +
 +  @Test(expectedExceptions = NullPointerException.class)
 +  public void shouldFailOnMissingPom() throws MavenEmbedderException {
 +    MavenSonarEmbedder.configure()
 +    .goal(goal)
 +    .setAlternativeMavenHome(MAVEN_HOME)
 +    .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +    .build();
 +  }
 +
 +  @Test(expectedExceptions = NullPointerException.class)
 +  public void shouldFailOnMissingGoal() throws MavenEmbedderException {
 +    MavenSonarEmbedder.configure()
 +    .usePomFile("pom.xml")
 +    .setAlternativeMavenHome(MAVEN_HOME)
 +    .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +    .build();
 +  }
 +
 +  @Test(expectedExceptions = IllegalArgumentException.class)
 +  public void shouldFailOnWrongMavenHome() throws MavenEmbedderException {
 +    System.setProperty(M2_HOME_KEY, "wrong");
 +    System.setProperty(MAVEN_HOME_KEY, "wrong");
 +    MavenSonarEmbedder.configure()
 +    .usePomFile("pom.xml")
 +    .goal(goal)
 +    .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +    .build();
 +  }
 +
 +  @Test(expectedExceptions = IllegalArgumentException.class)
 +  public void shouldFailOnWrongMavenHomeIsNotExisting() throws MavenEmbedderException {
 +    System.setProperty(M2_HOME_KEY, "wrong");
 +    System.setProperty(MAVEN_HOME_KEY, "wrong");
 +    MavenSonarEmbedder.configure()
 +    .usePomFile("pom.xml")
 +    .goal(goal)
 +    .setAlternativeMavenHome(new File("x"))
 +    .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +    .build();
 +  }
 +
 +  @Test(expectedExceptions = IllegalArgumentException.class)
 +  public void shouldFailOnWrongMavenHomeIsFile() throws MavenEmbedderException {
 +    System.setProperty(M2_HOME_KEY, "wrong");
 +    System.setProperty(MAVEN_HOME_KEY, "wrong");
 +    MavenSonarEmbedder.configure()
 +    .usePomFile("pom.xml")
 +    .goal(goal)
 +    .setAlternativeMavenHome(new File("pom.xml"))
 +    .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +    .build();
 +  }
 +
 +  @Test
 +  public void shouldFailOnWrongGoalNoPluginFound() throws MavenEmbedderException {
 +    try {
 +      MavenSonarEmbedder.configure()
 +      .usePomFile("pom.xml")
 +      .goal("not-present")
 +      .setAlternativeMavenHome(MAVEN_HOME)
 +      .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +      .build()
 +      .run();
 +    } catch (MavenEmbedderException e) {
 +      assertThat(e.getCause()).isExactlyInstanceOf(LifecyclePhaseNotFoundException.class);
 +    }
 +  }
 +
 +  @Test
 +  public void shouldFailOnWrongGoalNoPluginFound2() throws MavenEmbedderException {
 +    try {
 +      MavenSonarEmbedder.configure()
 +      .usePomFile("pom.xml")
 +      .goal("versions:helps")
 +      .setAlternativeMavenHome(MAVEN_HOME)
 +      .setMojoExecutionHandler(Mockito.mock(MojoExecutionHandler.class))
 +      .build()
 +      .run();
 +    } catch (MavenEmbedderException e) {
 +      Assertions.assertThat(e.getCause()).isExactlyInstanceOf(MojoNotFoundException.class);
 +    }
 +  }
 +
 +}
++=======
+ /*
+  * Sonar maven checks plugin
+  * Copyright (C) 2012 Lars Gohlke
+  * dev@sonar.codehaus.org
+  *
+  * This program is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+  * version 3 of the License, or (at your option) any later version.
+  *
+  * This program is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public
+  * License along with this program; if not, write to the Free Software
+  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+  */
+ package de.lgohlke.sonar.maven;
+ 
+ import hudson.maven.MavenEmbedderException;
+ import org.apache.maven.lifecycle.LifecyclePhaseNotFoundException;
+ import org.apache.maven.plugin.MojoNotFoundException;
+ import org.codehaus.plexus.logging.Logger;
+ import org.testng.annotations.BeforeMethod;
+ import org.testng.annotations.BeforeTest;
+ import org.testng.annotations.Test;
+ 
+ import java.io.File;
+ 
+ import static org.fest.assertions.api.Assertions.assertThat;
+ 
+ public class Maven3SonarEmbedderTest {
+   private static final String MAVEN_HOME_KEY = "maven.home";
+   private static final String M2_HOME_KEY = "M2_HOME";
+   // public static final File MAVEN_HOME = new File("/data/home/lgohlke/development/tools/apache-maven-3.0.4");
+   public static final File MAVEN_HOME = new File("/home/lars/development/tools/apache-maven-3.0.4");
+ 
+   @BeforeTest(alwaysRun = true)
+   @BeforeMethod(alwaysRun = true)
+   public void setUp() {
+     System.getProperties().remove(M2_HOME_KEY);
+     System.getProperties().remove(MAVEN_HOME_KEY);
+   }
+ 
+   final String goal = "versions:help";
+ 
+   @Test(expectedExceptions = NullPointerException.class)
+   public void shouldFailOnMissingPom() throws MavenEmbedderException {
+     Maven3SonarEmbedder.configure().
+         goal(goal).
+         setAlternativeMavenHome(MAVEN_HOME).
+         build();
+   }
+ 
+   @Test(expectedExceptions = NullPointerException.class)
+   public void shouldFailOnMissingGoal() throws MavenEmbedderException {
+     Maven3SonarEmbedder.configure().
+         usePomFile("pom.xml").
+         setAlternativeMavenHome(MAVEN_HOME).
+         build();
+   }
+ 
+   @Test(expectedExceptions = IllegalArgumentException.class)
+   public void shouldFailOnWrongMavenHome() throws MavenEmbedderException {
+     System.setProperty(M2_HOME_KEY, "wrong");
+     System.setProperty(MAVEN_HOME_KEY, "wrong");
+     Maven3SonarEmbedder.configure().
+         usePomFile("pom.xml").
+         goal(goal).
+         build();
+   }
+ 
+   @Test(expectedExceptions = IllegalArgumentException.class)
+   public void shouldFailOnWrongMavenHomeIsNotExisting() throws MavenEmbedderException {
+     System.setProperty(M2_HOME_KEY, "wrong");
+     System.setProperty(MAVEN_HOME_KEY, "wrong");
+     Maven3SonarEmbedder.configure().
+         usePomFile("pom.xml").
+         goal(goal).
+         setAlternativeMavenHome(new File("x")).
+         build();
+   }
+ 
+   @Test(expectedExceptions = IllegalArgumentException.class)
+   public void shouldFailOnWrongMavenHomeIsFile() throws MavenEmbedderException {
+     System.setProperty(M2_HOME_KEY, "wrong");
+     System.setProperty(MAVEN_HOME_KEY, "wrong");
+     Maven3SonarEmbedder.configure().
+         usePomFile("pom.xml").
+         goal(goal).
+         setAlternativeMavenHome(new File("pom.xml")).
+         build();
+   }
+ 
+   @Test
+   public void shouldRun() throws MavenEmbedderException {
+     Maven3SonarEmbedder.configure().
+         usePomFile("pom.xml").
+         goal(goal).
+         setAlternativeMavenHome(MAVEN_HOME).
+         build().
+         run();
+   }
+ 
+   @Test
+   public void shouldFailOnWrongGoalNoPluginFound() throws MavenEmbedderException {
+     try {
+       Maven3SonarEmbedder.configure().
+           usePomFile("pom.xml").
+           goal("not-present").
+           setAlternativeMavenHome(MAVEN_HOME).
+           build().
+           run();
+     } catch (MavenEmbedderException e) {
+       assertThat(e.getCause()).isExactlyInstanceOf(LifecyclePhaseNotFoundException.class);
+     }
+   }
+ 
+   @Test
+   public void shouldFailOnWrongGoalNoPluginFound2() throws MavenEmbedderException {
+     try {
+       Maven3SonarEmbedder.configure().
+           logLevel(Logger.LEVEL_WARN).
+           usePomFile("pom.xml").
+           goal("versions:helps").
+           setAlternativeMavenHome(MAVEN_HOME).
+           build().
+           run();
+     } catch (MavenEmbedderException e) {
+       assertThat(e.getCause()).isExactlyInstanceOf(MojoNotFoundException.class);
+     }
+   }
+ }
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
diff --cc src/test/java/de/lgohlke/sonar/maven/MyBridgeMojo.java
index bdc6f3e,2e655a3..0000000
--- a/src/test/java/de/lgohlke/sonar/maven/MyBridgeMojo.java
+++ b/src/test/java/de/lgohlke/sonar/maven/MyBridgeMojo.java
@@@ -1,54 -1,42 +1,99 @@@
++<<<<<<< HEAD
 +/*
 + * Sonar maven checks plugin
 + * Copyright (C) 2012 Lars Gohlke
 + * dev@sonar.codehaus.org
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of the GNU Lesser General Public
 + * License as published by the Free Software Foundation; either
 + * version 3 of the License, or (at your option) any later version.
 + *
 + * This program is distributed in the hope that it will be useful,
 + * but WITHOUT ANY WARRANTY; without even the implied warranty of
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 + * Lesser General Public License for more details.
 + *
 + * You should have received a copy of the GNU Lesser General Public
 + * License along with this program; if not, write to the Free Software
 + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 + */
 +package de.lgohlke.sonar.maven;
 +
 +import lombok.RequiredArgsConstructor;
 +import lombok.extern.slf4j.Slf4j;
 +import org.apache.maven.plugin.Mojo;
 +
 +
 +@RequiredArgsConstructor
 +@Slf4j
 +public abstract class MojoExecutionHandler<ORIGINAL_MOJO extends Mojo, REPLACING_MOJO extends ORIGINAL_MOJO> {
 +  private final Class<ORIGINAL_MOJO> original_MOJO;
 +  private final Class<REPLACING_MOJO> replacing_MOJO;
 +
 +  @SuppressWarnings("unchecked")
 +  public final void beforeExecution(final Mojo mojo) {
 +    beforeExecution2((REPLACING_MOJO) mojo);
 +  }
 +
 +  protected abstract void beforeExecution2(final REPLACING_MOJO mojo);
 +
 +  @SuppressWarnings("unchecked")
 +  public final void afterExecution(final Mojo mojo) {
 +    afterExecution2((REPLACING_MOJO) mojo);
 +  }
 +
 +  protected abstract void afterExecution2(final REPLACING_MOJO mojo);
 +
 +  public final Class<ORIGINAL_MOJO> getOriginalMojo() {
 +    return original_MOJO;
 +  }
 +
 +  public final Class<REPLACING_MOJO> getReplacingMojo() {
 +    return replacing_MOJO;
 +  }
 +}
++=======
+ /*
+  * Sonar maven checks plugin
+  * Copyright (C) 2012 Lars Gohlke
+  * dev@sonar.codehaus.org
+  *
+  * This program is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+  * version 3 of the License, or (at your option) any later version.
+  *
+  * This program is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Lesser General Public License for more details.
+  *
+  * You should have received a copy of the GNU Lesser General Public
+  * License along with this program; if not, write to the Free Software
+  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+  */
+ package de.lgohlke.sonar.maven;
+ 
+ import de.lgohlke.sonar.maven.Maven3ExecutionProcessTest.MyResultTransferHandler;
+ import de.lgohlke.sonar.maven.plugin.BridgeMojo;
+ import de.lgohlke.sonar.maven.plugin.ResultTransferHandler;
+ import org.apache.maven.plugin.MojoExecutionException;
+ import org.codehaus.mojo.versions.HelpMojo;
+ 
+ @Goal("help")
+ public class MyBridgeMojo extends HelpMojo implements BridgeMojo<MyResultTransferHandler> {
+ 
+   private MyResultTransferHandler handler;
+ 
+   @Override
+   public void execute() throws MojoExecutionException {
+     handler.setPing(true);
+   }
+ 
+   @Override
+   public void injectResultHandler(final ResultTransferHandler<?> handler) {
+     this.handler = (MyResultTransferHandler) handler;
+   }
 -}
++}
++>>>>>>> a0d86da492cd5876a91308c0c76186f3c9f7c37b
* Unmerged path src/main/java/de/lgohlke/sonar/maven/SonarMavenEmbeddedLookupStrategy.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/SonarMavenMojoLookupStratey.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/extension/ExecutionListenerImpl.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/extension/MyDefaultBuildPluginManager.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/DisplayDependencyUpdatesBridgeMojo.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/HelpBridgeMojo.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/sonar/VersionHelpExecutor.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/sonar/rules/DependencyVersionMavenRule.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/sonar/rules/PluginVersionMavenRule.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/DependencyVersionExecutor.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/DependencyVersionMavenRule.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/Goals.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/HelpBridgeMojo.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/PluginVersionMavenRule.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/rules/DependencyVersionMavenRule.java
* Unmerged path src/main/java/de/lgohlke/sonar/maven/plugin/versions/rules/PluginVersionMavenRule.java
* Unmerged path src/test/java/de/lgohlke/sonar/maven/plugin/org/codehaus/mojo/versions/DisplayDependencyUpdatesBridgeMojoTest.java
